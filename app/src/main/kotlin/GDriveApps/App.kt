package GDriveApps

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.gson.GsonFactory
import com.google.api.client.util.store.FileDataStoreFactory
import com.google.api.client.googleapis.json.GoogleJsonResponseException
import com.google.api.client.http.HttpResponseException
import com.google.api.services.drive.Drive
import com.google.api.services.drive.DriveScopes
import com.google.api.services.drive.model.FileList
import java.io.FileNotFoundException
import java.io.IOException
import java.io.InputStream
import java.io.InputStreamReader
import java.security.GeneralSecurityException
import java.util.Collections
import java.io.File


/* class to demonstrate use of Drive files list API */
class GDriveDn {
  /**
   * Application name.
   */
  private val APPLICATION_NAME = "Google Drive API Java Quickstart"
  /**
   * Global instance of the JSON factory.
   */
  private val JSON_FACTORY = GsonFactory.getDefaultInstance()
  /**
   * Directory to store authorization tokens for this application.
   */
  private val TOKENS_DIRECTORY_PATH = "data\\tokens"

  /**
   * Global instance of the scopes required by this quickstart.
   * If modifying these scopes, delete your previously saved tokens/ folder.
   * 
   * DRIVE_READONLY to be able to download files.
   */
  private val SCOPES = listOf(
    DriveScopes.DRIVE_METADATA_READONLY, DriveScopes.DRIVE_READONLY
  )
  private val CREDENTIALS_FILE_PATH = "data\\credentials.json"
  /**
   * rar files destination dir
   */
  private val RAR_DESTINATION_DIR = "F:\\Movie"
  /**
   * non rar files destination dir i.e., mkv, srt
   */
  // To Test when external HDD is not available
  // private val RAR_DESTINATION_DIR = "D:\\Ent\\gDrive_XFer\\Test"
  private val NON_RAR_DESTINATION_DIR = "D:\\Ent\\gDrive_XFer"
  

  /**
   * Creates an authorized Credential object.
   *
   * @param HTTP_TRANSPORT The network HTTP Transport.
   * @return An authorized Credential object.
   * @throws IOException If the credentials.json file cannot be found.
   */
  private fun getCredentials(HTTP_TRANSPORT: NetHttpTransport): Credential {
    // Load client secrets.
    val file: File? = File(CREDENTIALS_FILE_PATH)
    if (file == null) {
      throw FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH)
    }

    val inputStream = file.inputStream()
    val clientSecrets =
        GoogleClientSecrets.load(JSON_FACTORY, InputStreamReader(inputStream))

    // Build flow and trigger user authorization request.
    val flow = GoogleAuthorizationCodeFlow.Builder(
        HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
        .setDataStoreFactory(FileDataStoreFactory(File(TOKENS_DIRECTORY_PATH)))
        .setAccessType("offline")
        .build()

    val receiver = LocalServerReceiver.Builder().setPort(8888).build()
    val credential = AuthorizationCodeInstalledApp(flow, receiver).authorize("user")

    // returns an authorized Credential object.
    return credential
  }

  /**
   * Gets the destination directory of files that are being downloaded
   *
   * @param dirName Name of the directory
   * @return Dest Dir String
   * @throws N/A
   *
   * MIME Types list ref,
   *  https://developers.google.com/drive/api/guides/mime-types
   */
  public fun getDestinationDir(dirName: String, mimeType: String): String {
    var destDir = "$RAR_DESTINATION_DIR\\$dirName"
    if (mimeType != "application/rar") {
      destDir = "$NON_RAR_DESTINATION_DIR\\$dirName"
    }
    return destDir
  }

  /**
   * Creates the directory if it doesn't exist!
   *
   * @param dirPath Path of the directory
   * @return N/A
   * @throws Exception If dir cannot be created
   */
  private fun createDestinationDirIfDoesNotExist(dirPath: String) {
    val directory = File(dirPath)
    if (!directory.exists()) {
      // Create the directory
      val success = directory.mkdirs()
      if (success) {
        println("Created dir: $dirPath")
      }
      else {
        // An error occurred while creating the directory
        throw Exception("Failed to create directory: $directory")
      }
    }
  }


  /**
   * Get destination full path
   *
   * @param destDir Destination directory where the file will be downloaded to
   * @param name Name of the file
   * @return Full Path String
   * @throws N/A
   */
  private fun getDestinationFullPath(destDir: String, name: String) = destDir + "\\$name"


  /**
   * Downloads the specified file
   *
   * @param service Google Drive Service
   * @param dirName Name of the specified directory
   * @param fileName Name of the specified file to download
   * @param fileId Id of the specified file
   * @return N/A
   * @throws Exception If dir cannot be created
   * 
   * **Refs**
   * - file.exists
   *  https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/exists.html
   * 
   * - GoogleJsonResponseException import
   *  https://developers.google.com/gmail/api/guides/sending
   */
  private fun getURI(service: Drive, fileId: String, destPath: String) {
    // Create a file object to download the file to.
    val file = File(destPath)
    if (file.exists()) {
      print("S ")
      return
    }

    // Download the file.
    try {
      val request = service.files().get(fileId)
      val outputStream = file.outputStream()
      val response = request.executeMediaAndDownloadTo(outputStream)
      // Check if the download was successful.
      print("D " if response.isSuccessful else "F ")

      println(destPath)
    }
    catch (e: java.net.SocketException) {
      println("Network connection reset! Details: $e")
    }
     catch (e: java.net.SocketTimeoutException) {
      println("Socket timed out probably network connection problem! Details: $e")
    }
    catch (e: IOException) {
      println("IO Error downloading file: $e")
    }
  }

  /**
   * Iterate over the specified directory and download files.
   *
   * @param dirName Name of the specified directory
   * @throws Exception If dir cannot be created
   * 
   * list
   *  https://developers.google.com/drive/api/reference/rest/v3/files/list
   * 
   * Google File Structure in response ref,
   *  https://developers.google.com/drive/api/reference/rest/v3/files
   */
  public fun DownloadDirectory(dirId: String) {
    // Build a new authorized API client service.
    val HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport()
    val credentials = getCredentials(HTTP_TRANSPORT)
    val service = Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, credentials)
      .setApplicationName(APPLICATION_NAME)
      .build()

    // Get the file metadata
    val fileMetadata = try {
      service.files().get(dirId).execute()
    }
    catch (e: GoogleJsonResponseException) {
      if (e.getStatusCode() == 404) {
        // The file does not exist
        println("Provided directory id could not be found!")
        return
      } else {
        println("Some other GoogleJsonResponseException occurred!")
        throw e
      }
    }
    catch (e: IOException) {
      println("An IOException occurred!")
      throw e
    }

    // Get the file name
    val dirName = fileMetadata.name
    println("Dir name: $dirName")

    // Download max upto 1000 files
    val result = service.files().list()
      .setQ("parents='$dirId'")
      .setPageSize(1000)
      .setFields("nextPageToken, files(id, name, mimeType)")
      .execute()

    println("Google Drive Downloader")
    println("------------------------------")

    val files = result.getFiles()
    for (file in files) {
      // val fileSizeInKB = file.size / 1024
      // println("${count}: ${file.name} ${file.mimeType}")
      val destDir = getDestinationDir(dirName, file.mimeType)
      createDestinationDirIfDoesNotExist(destDir)
      val destFullPath = getDestinationFullPath(destDir, file.name)
      getURI(service, file.id, destFullPath)
    }
  }
}

fun main(args: Array<String>) {
  // Check if the dirId argument is present
  if (args.size != 1) {
    // Print an error message
    println("Error: dirId argument is mandatory")
    return
  }

  // Get the dirId from the command line arguments
  val dirId = args[0]

  GDriveDn().DownloadDirectory(dirId)
}
